#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
typedef struct {
    int tasknum;
    char task;
}tasklist_t;
void CommandsList()
{
    FILE *CommandsList = fopen("C:\\Users\\Adam\\Desktop\\greenfox\\BercziAdam\\week-04\\day-03\\ToDo\\CommandsList.txt", "r");
    if (CommandsList == NULL) {
        printf("Cannot open file \n");
        exit(0);
    }
    char c;
    c = fgetc(CommandsList);
    while (c != EOF) {
        printf ("%c", c);
        c = fgetc(CommandsList);
    }
    fclose(CommandsList);
}
tasklist_t *AddNewTask(tasklist_t *tlist, char *command, int lenght, int count_a)
{
    tlist =  realloc(tlist, count_a * sizeof(tasklist_t));
    /*if(tlist == NULL) {
            tlist = (tasklist_t*) malloc(sizeof(tasklist_t));
    } else
        tlist =  realloc(tlist, count_a * sizeof(tasklist_t));*/

    char *command1 = (char*) calloc (lenght, sizeof(char));
    strcpy(command1, command);

    char *buffer = (char*)calloc(lenght-5, sizeof(char));
    const char quotationmark[2] = {'"'};
    buffer = strtok(command1, quotationmark);

    if (buffer != NULL) {
        buffer = strtok(NULL, quotationmark);
        strcpy(tlist[count_a].task, buffer);
        puts(tlist[count_a].task);
        //tlist[count_a]->tasknum = count_a + 1;

        //printf("%d\t%d\t%s", count_a,tlist[count_a].tasknum, tlist[count_a].task);
        }
    free(buffer);
    free(command1);
    return tlist;
}
void PrintTasks (tasklist_t *tlist, int count_a)
{
    for (int i = 0; i < count_a; i++) {
        printf("%d\t%d\t%s\n",count_a, tlist[i].tasknum, tlist[i].task);
    }
}
int main()
{
    CommandsList();
    tasklist_t *tlist = (tasklist_t*) malloc(sizeof(tasklist_t));

    //printf("%d\t%s",tlist[0].tasknum,tlist[0].task);
    int count_a = 0;
    while (1) {


        char *command = (char*) malloc(strlen(command)*sizeof(char));
        gets(command);
        int lenght = strlen(command);
    if (command[0] == '-' && command[1] == 'a' && command[2] == ' ' && command[lenght-1] == '"' && command[3] == '"') {
        AddNewTask( tlist, command, lenght, count_a);
       // printf("%d\t%d\t%s\n", count_a, tlist[count_a].tasknum, tlist[count_a].task);
        count_a++;
        //printf("%d", count_a);


    } else if (command[0] == '-' && command[1] == 'l') {
        PrintTasks(tlist, count_a);


    } else if (command[0] == '-' && command[1] == 'w' && command[2] == 'r') {
    }
    //printf("%d\t%s\n", count_a,tlist[1].tasknum, tlist[1].task);

    }
    free(tlist);
    return 0;
}

