
BlinkyBill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077b  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include <util/delay.h>		// This header contains the _delay_ms() function

int main(void)
{
	
	DDRB |=(1 << DDRB5);
  84:	25 9a       	sbi	0x04, 5	; 4
	DDRB |=(1 << DDRB4);
  86:	24 9a       	sbi	0x04, 4	; 4
	DDRB |=(1 << DDRB3);
  88:	23 9a       	sbi	0x04, 3	; 4
	DDRB |=(1 << DDRB2);
  8a:	22 9a       	sbi	0x04, 2	; 4
	DDRB |=(1 << DDRB1);
  8c:	21 9a       	sbi	0x04, 1	; 4
	DDRB |=(1 << DDRB0);
  8e:	20 9a       	sbi	0x04, 0	; 4
	while (1) {
		int x=5;
		int i=50;
		for (x=0; x<=5; x++)
		{
		PORTB |=(1 << x);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	70 e0       	ldi	r23, 0x00	; 0
	DDRB |=(1 << DDRB0);

	while (1) {
		int x=5;
		int i=50;
		for (x=0; x<=5; x++)
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
		{
		PORTB |=(1 << x);
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	cb 01       	movw	r24, r22
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x20>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x1c>
  a8:	94 2f       	mov	r25, r20
  aa:	98 2b       	or	r25, r24
  ac:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	50 e7       	ldi	r21, 0x70	; 112
  b2:	e2 e0       	ldi	r30, 0x02	; 2
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	e0 40       	sbci	r30, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x30>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3a>
  be:	00 00       	nop
		_delay_ms(i);
		PORTB &= ~(1 << x);
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	50 e7       	ldi	r21, 0x70	; 112
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x54>
  d8:	00 00       	nop
	DDRB |=(1 << DDRB0);

	while (1) {
		int x=5;
		int i=50;
		for (x=0; x<=5; x++)
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	26 30       	cpi	r18, 0x06	; 6
  e0:	31 05       	cpc	r19, r1
  e2:	d1 f6       	brne	.-76     	; 0x98 <main+0x14>
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1 << x);
		_delay_ms(i);
		}
		for (x=5; x>=0; x--)
		{
			PORTB |=(1 << x);
  e8:	45 b1       	in	r20, 0x05	; 5
  ea:	cb 01       	movw	r24, r22
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <main+0x70>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <main+0x6c>
  f8:	94 2f       	mov	r25, r20
  fa:	98 2b       	or	r25, r24
  fc:	95 b9       	out	0x05, r25	; 5
  fe:	ef ef       	ldi	r30, 0xFF	; 255
 100:	40 e7       	ldi	r20, 0x70	; 112
 102:	52 e0       	ldi	r21, 0x02	; 2
 104:	e1 50       	subi	r30, 0x01	; 1
 106:	40 40       	sbci	r20, 0x00	; 0
 108:	50 40       	sbci	r21, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x80>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x8a>
 10e:	00 00       	nop
			_delay_ms(i);
			PORTB &= ~(1 << x);
 110:	95 b1       	in	r25, 0x05	; 5
 112:	80 95       	com	r24
 114:	89 23       	and	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	90 e7       	ldi	r25, 0x70	; 112
 11c:	e2 e0       	ldi	r30, 0x02	; 2
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e0 40       	sbci	r30, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa4>
 128:	00 00       	nop
		PORTB |=(1 << x);
		_delay_ms(i);
		PORTB &= ~(1 << x);
		_delay_ms(i);
		}
		for (x=5; x>=0; x--)
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	31 09       	sbc	r19, r1
 12e:	e0 f6       	brcc	.-72     	; 0xe8 <main+0x64>
 130:	b1 cf       	rjmp	.-158    	; 0x94 <main+0x10>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
